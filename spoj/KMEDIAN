uses math;
const
        lim=100001;
        fi='';
        fo='';
type    spec=record
        gt,vt:longint;
        end;
var
        res:int64;
        n,luu:longint;
        BIT,tmp:array[0..200001]of int64;
        a:array[0..100002]of spec;
//-----------------------------COMPRESS-------------------------
procedure sort(l,r:longint);
var
        i,j,pv:longint;
        tmp:spec;
begin
        if l>=r then exit;      i:=l;   j:=r;   pv:=a[(l+r)div 2].gt;
        repeat
                while a[i].gt<pv do inc(i);
                while a[j].gt>pv do dec(j);
                if i<=j then
                begin
                        tmp:=a[i];
                        a[i]:=a[j];
                        a[j]:=tmp;
                        inc(i);
                        dec(j);
                end;
        until i>=j;
        sort(l,j);
        sort(i,r);
end;

procedure compress;
var
        i,count:longint;
begin
        tmp[a[1].vt]:=1;        count:=1;       if a[1].gt=0 then luu:=1;
        for i:=2 to n+1 do
        begin
                if a[i].gt<>a[i-1].gt then
                        inc(count);
                tmp[a[i].vt]:=count;
                if a[i].gt=0 then luu:=count;
        end;
end;

//---------------------------BIT---------------------------------
function find(u:longint):longint;
begin
        if u<=0 then exit(0);
        res:=res+BIT[u];
        find(u-u and -u);
end;

procedure update(u:longint);
begin
        if u>lim then exit;
        inc(BIT[u]);
        update(u+u and -u);
end;

//---------------------------SOLVE---------------------------------
procedure init;
var
        i,x:longint;
begin
        assign(input,fi);          assign(output,fo);
        reset(input);              rewrite(output);
        readln(n,x);
        for i:=1 to n do
        begin
                read(tmp[i]);
                if tmp[i]>=x then tmp[i]:=1
                else              tmp[i]:=-1;
        end;
        for i:=n downto 1 do
        begin
                a[i].gt:=tmp[i]+a[i+1].gt;
                a[i].vt:=i;
        end;
        a[n+1].vt:=n+1;         a[n+1].gt:=0;
        fillchar(tmp,sizeof(tmp),0);
end;

procedure solve;
var
        i:longint;
begin
        update(luu);
        for i:=n downto 1 do
        begin
                find(tmp[i]);
                update(tmp[i]);
        end;
        writeln(res);
end;

//--------------------------MAIN-----------------------------------

begin
        init;
        sort(1,n+1);
        compress;
        solve;
end.


